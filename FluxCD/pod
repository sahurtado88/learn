import subprocess
import json
import sys

def run_command(command):
    """Ejecuta un comando en la terminal y devuelve la salida en formato JSON."""
    try:
        output = subprocess.check_output(command, shell=True, text=True)
        return json.loads(output)
    except subprocess.CalledProcessError as e:
        print(f"Error ejecutando {command}: {e}")
        return None

def get_pods_on_node(node_name):
    """Obtiene los pods en ejecución en un nodo específico."""
    cmd = f'kubectl get pods --all-namespaces -o json --field-selector spec.nodeName={node_name}'
    data = run_command(cmd)
    return data.get("items", []) if data else []

def scale_resources_on_node(node_name):
    """Desescala los Deployments, StatefulSets y Jobs de un nodo."""
    pods = get_pods_on_node(node_name)
    
    for pod in pods:
        namespace = pod["metadata"]["namespace"]
        owner_refs = pod["metadata"].get("ownerReferences", [])
        
        for owner in owner_refs:
            kind = owner["kind"]
            name = owner["name"]

            if kind == "Deployment":
                print(f"Escalando a 0: Deployment {name} en {namespace}")
                subprocess.run(f"kubectl scale deployment {name} -n {namespace} --replicas=0", shell=True)

            elif kind == "StatefulSet":
                print(f"Escalando a 0: StatefulSet {name} en {namespace}")
                subprocess.run(f"kubectl scale statefulset {name} -n {namespace} --replicas=0", shell=True)

            elif kind == "Job":
                print(f"Eliminando Job {name} en {namespace}")
                subprocess.run(f"kubectl delete job {name} -n {namespace} --force --grace-period=0", shell=True)

            elif kind == "DaemonSet":
                print(f"⚠️ Saltando DaemonSet {name}, estos deben manejarse manualmente.")

    print(f"Eliminando pods en el nodo {node_name}...")
    subprocess.run(f"kubectl delete pod --field-selector spec.nodeName={node_name}", shell=True)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Uso: python desescalar.py <node-name>")
        sys.exit(1)

    node_name = sys.argv[1]
    scale_resources_on_node(node_name)
    print("✅ Proceso de desescalado completado.")
